// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bootstrap_cpp_mt
NumericMatrix bootstrap_cpp_mt(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, const double c, const double n_prop, const int s_1_val, const int s_2_val, const int B, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_bootstrap_cpp_mt(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP s_1_valSEXP, SEXP s_2_valSEXP, SEXP BSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< const int >::type s_1_val(s_1_valSEXP);
    Rcpp::traits::input_parameter< const int >::type s_2_val(s_2_valSEXP);
    Rcpp::traits::input_parameter< const int >::type B(BSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_cpp_mt(X, Y, X_test, c, n_prop, s_1_val, s_2_val, B, W0_));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_trt_effect_cpp_mt
NumericMatrix bootstrap_trt_effect_cpp_mt(const arma::mat& X, const arma::mat& Y, const arma::vec& W, const arma::mat& X_test, const arma::vec& s_choice_trt, const arma::vec& s_choice_ctl, const double c, const double n_prop, const double M, const int B, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_bootstrap_trt_effect_cpp_mt(SEXP XSEXP, SEXP YSEXP, SEXP WSEXP, SEXP X_testSEXP, SEXP s_choice_trtSEXP, SEXP s_choice_ctlSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP MSEXP, SEXP BSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s_choice_trt(s_choice_trtSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s_choice_ctl(s_choice_ctlSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< const double >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int >::type B(BSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_trt_effect_cpp_mt(X, Y, W, X_test, s_choice_trt, s_choice_ctl, c, n_prop, M, B, W0_));
    return rcpp_result_gen;
END_RCPP
}
// make_pdist_mat
arma::mat make_pdist_mat(const arma::mat& X, const arma::mat& X_test, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_make_pdist_mat(SEXP XSEXP, SEXP X_testSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(make_pdist_mat(X, X_test, W0_));
    return rcpp_result_gen;
END_RCPP
}
// make_ordered_Y_mat
arma::mat make_ordered_Y_mat(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, bool debug);
RcppExport SEXP _tdnn_make_ordered_Y_mat(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(make_ordered_Y_mat(X, Y, X_test, debug));
    return rcpp_result_gen;
END_RCPP
}
// de_dnn_st_tuning
arma::mat de_dnn_st_tuning(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, const arma::vec& s_sizes, double c, double n_prop, double C_s_2, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_de_dnn_st_tuning(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP s_sizesSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP C_s_2SEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s_sizes(s_sizesSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< double >::type C_s_2(C_s_2SEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(de_dnn_st_tuning(X, Y, X_test, s_sizes, c, n_prop, C_s_2, W0_));
    return rcpp_result_gen;
END_RCPP
}
// de_dnn_st_mat_mult
arma::vec de_dnn_st_mat_mult(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, const arma::vec& s_sizes, double c, double n_prop, double C_s_2, Nullable<NumericVector> W0_, bool debug);
RcppExport SEXP _tdnn_de_dnn_st_mat_mult(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP s_sizesSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP C_s_2SEXP, SEXP W0_SEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s_sizes(s_sizesSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< double >::type C_s_2(C_s_2SEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(de_dnn_st_mat_mult(X, Y, X_test, s_sizes, c, n_prop, C_s_2, W0_, debug));
    return rcpp_result_gen;
END_RCPP
}
// de_dnn_st_loop
arma::vec de_dnn_st_loop(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, const arma::vec& s_sizes, double c, double n_prop, double C_s_2, Nullable<NumericVector> W0_, bool debug);
RcppExport SEXP _tdnn_de_dnn_st_loop(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP s_sizesSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP C_s_2SEXP, SEXP W0_SEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s_sizes(s_sizesSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< double >::type C_s_2(C_s_2SEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(de_dnn_st_loop(X, Y, X_test, s_sizes, c, n_prop, C_s_2, W0_, debug));
    return rcpp_result_gen;
END_RCPP
}
// de_dnn_st
arma::vec de_dnn_st(const arma::mat& eu_dist_mat, const arma::mat& Y, const arma::mat& X_test, const arma::vec& s_sizes, double c, int d, int n, double C_s_2, bool debug);
RcppExport SEXP _tdnn_de_dnn_st(SEXP eu_dist_matSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP s_sizesSEXP, SEXP cSEXP, SEXP dSEXP, SEXP nSEXP, SEXP C_s_2SEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type eu_dist_mat(eu_dist_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s_sizes(s_sizesSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type C_s_2(C_s_2SEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(de_dnn_st(eu_dist_mat, Y, X_test, s_sizes, c, d, n, C_s_2, debug));
    return rcpp_result_gen;
END_RCPP
}
// best_s
NumericVector best_s(const arma::mat& estimate_matrix);
RcppExport SEXP _tdnn_best_s(SEXP estimate_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type estimate_matrix(estimate_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(best_s(estimate_matrix));
    return rcpp_result_gen;
END_RCPP
}
// tuning_st
arma::vec tuning_st(const NumericVector& s_seq, const arma::mat& eu_dist_mat, const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, double c, int d, int n, int n_test_obs, NumericVector W0_, bool debug, bool verbose);
RcppExport SEXP _tdnn_tuning_st(SEXP s_seqSEXP, SEXP eu_dist_matSEXP, SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP dSEXP, SEXP nSEXP, SEXP n_test_obsSEXP, SEXP W0_SEXP, SEXP debugSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type s_seq(s_seqSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eu_dist_mat(eu_dist_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_test_obs(n_test_obsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W0_(W0_SEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tuning_st(s_seq, eu_dist_mat, X, Y, X_test, c, d, n, n_test_obs, W0_, debug, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tuning_es
arma::vec tuning_es(const arma::mat& eu_dist_mat, const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, double c, int d, int n, int n_test_obs, Nullable<NumericVector> W0_, bool debug, bool verbose);
RcppExport SEXP _tdnn_tuning_es(SEXP eu_dist_matSEXP, SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP dSEXP, SEXP nSEXP, SEXP n_test_obsSEXP, SEXP W0_SEXP, SEXP debugSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type eu_dist_mat(eu_dist_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_test_obs(n_test_obsSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tuning_es(eu_dist_mat, X, Y, X_test, c, d, n, n_test_obs, W0_, debug, verbose));
    return rcpp_result_gen;
END_RCPP
}
// est_reg_fn_rcpp
List est_reg_fn_rcpp(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, double c, Nullable<NumericVector> W0_, String tuning_method, bool verbose);
RcppExport SEXP _tdnn_est_reg_fn_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP W0_SEXP, SEXP tuning_methodSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    Rcpp::traits::input_parameter< String >::type tuning_method(tuning_methodSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(est_reg_fn_rcpp(X, Y, X_test, c, W0_, tuning_method, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tuning_st_loop
arma::vec tuning_st_loop(const NumericVector& s_seq, const arma::mat& X, const arma::mat& X_test, const arma::mat& Y, double c, double n_prop, double C_s_2, Nullable<NumericVector> W0_, bool debug, bool verbose);
RcppExport SEXP _tdnn_tuning_st_loop(SEXP s_seqSEXP, SEXP XSEXP, SEXP X_testSEXP, SEXP YSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP C_s_2SEXP, SEXP W0_SEXP, SEXP debugSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type s_seq(s_seqSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< double >::type C_s_2(C_s_2SEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tuning_st_loop(s_seq, X, X_test, Y, c, n_prop, C_s_2, W0_, debug, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tuning_st_mat_mult
arma::vec tuning_st_mat_mult(const NumericVector& s_seq, const arma::mat& X, const arma::mat& X_test, const arma::mat& Y, double c, double n_prop, double C_s_2, Nullable<NumericVector> W0_, bool debug, bool verbose);
RcppExport SEXP _tdnn_tuning_st_mat_mult(SEXP s_seqSEXP, SEXP XSEXP, SEXP X_testSEXP, SEXP YSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP C_s_2SEXP, SEXP W0_SEXP, SEXP debugSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type s_seq(s_seqSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< double >::type C_s_2(C_s_2SEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tuning_st_mat_mult(s_seq, X, X_test, Y, c, n_prop, C_s_2, W0_, debug, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tuning_es_loop
arma::vec tuning_es_loop(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, double c, int d, double n_prop, double C_s_2, Nullable<NumericVector> W0_, bool debug, bool verbose);
RcppExport SEXP _tdnn_tuning_es_loop(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP dSEXP, SEXP n_propSEXP, SEXP C_s_2SEXP, SEXP W0_SEXP, SEXP debugSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< double >::type C_s_2(C_s_2SEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tuning_es_loop(X, Y, X_test, c, d, n_prop, C_s_2, W0_, debug, verbose));
    return rcpp_result_gen;
END_RCPP
}
// est_reg_fn_st_loop
arma::vec est_reg_fn_st_loop(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, double c, double n_prop, double C_s_2, String tuning_method, Nullable<NumericVector> W0_, bool verbose);
RcppExport SEXP _tdnn_est_reg_fn_st_loop(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP C_s_2SEXP, SEXP tuning_methodSEXP, SEXP W0_SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< double >::type C_s_2(C_s_2SEXP);
    Rcpp::traits::input_parameter< String >::type tuning_method(tuning_methodSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(est_reg_fn_st_loop(X, Y, X_test, c, n_prop, C_s_2, tuning_method, W0_, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tdnn
arma::vec tdnn(arma::mat X, arma::vec Y, arma::mat X_test, double c, double n_prop, int s_1_val, int s_2_val, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_tdnn(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP s_1_valSEXP, SEXP s_2_valSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< int >::type s_1_val(s_1_valSEXP);
    Rcpp::traits::input_parameter< int >::type s_2_val(s_2_valSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(tdnn(X, Y, X_test, c, n_prop, s_1_val, s_2_val, W0_));
    return rcpp_result_gen;
END_RCPP
}
// de_dnn
arma::vec de_dnn(arma::mat X, arma::vec Y, arma::mat X_test, arma::vec s_sizes, double c, double n_prop, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_de_dnn(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP s_sizesSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s_sizes(s_sizesSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(de_dnn(X, Y, X_test, s_sizes, c, n_prop, W0_));
    return rcpp_result_gen;
END_RCPP
}
// tuning
NumericVector tuning(arma::mat X, arma::vec Y, arma::mat X_test, double c, double n_prop, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_tuning(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(tuning(X, Y, X_test, c, n_prop, W0_));
    return rcpp_result_gen;
END_RCPP
}
// tuning_est
List tuning_est(arma::mat X, arma::vec Y, arma::mat X_test, double c, double n_prop, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_tuning_est(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(tuning_est(X, Y, X_test, c, n_prop, W0_));
    return rcpp_result_gen;
END_RCPP
}
// get_1nn_reg
arma::vec get_1nn_reg(arma::mat X, arma::mat X_test, arma::mat Y, int k);
RcppExport SEXP _tdnn_get_1nn_reg(SEXP XSEXP, SEXP X_testSEXP, SEXP YSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(get_1nn_reg(X, X_test, Y, k));
    return rcpp_result_gen;
END_RCPP
}
// fastPdist
arma::mat fastPdist(const arma::mat& Ar, const arma::mat& Br);
RcppExport SEXP _tdnn_fastPdist(SEXP ArSEXP, SEXP BrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Ar(ArSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Br(BrSEXP);
    rcpp_result_gen = Rcpp::wrap(fastPdist(Ar, Br));
    return rcpp_result_gen;
END_RCPP
}
// tdnn_reg_cpp
List tdnn_reg_cpp(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, double c, double n_prop, int s_1_val, int bootstrap_iter, bool estimate_variance, bool verbose, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_tdnn_reg_cpp(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP s_1_valSEXP, SEXP bootstrap_iterSEXP, SEXP estimate_varianceSEXP, SEXP verboseSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< int >::type s_1_val(s_1_valSEXP);
    Rcpp::traits::input_parameter< int >::type bootstrap_iter(bootstrap_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type estimate_variance(estimate_varianceSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(tdnn_reg_cpp(X, Y, X_test, c, n_prop, s_1_val, bootstrap_iter, estimate_variance, verbose, W0_));
    return rcpp_result_gen;
END_RCPP
}
// tdnn_reg_cv_cpp
List tdnn_reg_cv_cpp(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, const arma::mat& param_mat, double n_prop, int B, int bootstrap_iter, bool estimate_variance, bool verbose, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_tdnn_reg_cv_cpp(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP param_matSEXP, SEXP n_propSEXP, SEXP BSEXP, SEXP bootstrap_iterSEXP, SEXP estimate_varianceSEXP, SEXP verboseSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type param_mat(param_matSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type bootstrap_iter(bootstrap_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type estimate_variance(estimate_varianceSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(tdnn_reg_cv_cpp(X, Y, X_test, param_mat, n_prop, B, bootstrap_iter, estimate_variance, verbose, W0_));
    return rcpp_result_gen;
END_RCPP
}
// pt_mat_dist
arma::vec pt_mat_dist(arma::mat X, arma::vec y);
RcppExport SEXP _tdnn_pt_mat_dist(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pt_mat_dist(X, y));
    return rcpp_result_gen;
END_RCPP
}
// make_ord_vec
arma::vec make_ord_vec(int n);
RcppExport SEXP _tdnn_make_ord_vec(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(make_ord_vec(n));
    return rcpp_result_gen;
END_RCPP
}
// make_ordered_Y_vec
arma::rowvec make_ordered_Y_vec(const arma::mat& X_train, const arma::vec& X_val_vec, const arma::mat& Y_train, int n);
RcppExport SEXP _tdnn_make_ordered_Y_vec(SEXP X_trainSEXP, SEXP X_val_vecSEXP, SEXP Y_trainSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_train(X_trainSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type X_val_vec(X_val_vecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_train(Y_trainSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(make_ordered_Y_vec(X_train, X_val_vec, Y_train, n));
    return rcpp_result_gen;
END_RCPP
}
// make_param_estimate
arma::vec make_param_estimate(const arma::mat& X_train, const arma::mat& Y_train, const arma::mat& X_val, const arma::rowvec& ordered_Y, const arma::vec& ord_arma, int n, int p, int log_n, double c, int s_1_val, int s_2_val, double n_prop);
RcppExport SEXP _tdnn_make_param_estimate(SEXP X_trainSEXP, SEXP Y_trainSEXP, SEXP X_valSEXP, SEXP ordered_YSEXP, SEXP ord_armaSEXP, SEXP nSEXP, SEXP pSEXP, SEXP log_nSEXP, SEXP cSEXP, SEXP s_1_valSEXP, SEXP s_2_valSEXP, SEXP n_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_train(X_trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_train(Y_trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_val(X_valSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type ordered_Y(ordered_YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ord_arma(ord_armaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type log_n(log_nSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type s_1_val(s_1_valSEXP);
    Rcpp::traits::input_parameter< int >::type s_2_val(s_2_valSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    rcpp_result_gen = Rcpp::wrap(make_param_estimate(X_train, Y_train, X_val, ordered_Y, ord_arma, n, p, log_n, c, s_1_val, s_2_val, n_prop));
    return rcpp_result_gen;
END_RCPP
}
// loo_test
Rcpp::List loo_test(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, const arma::mat& param_mat, int B, double n_prop, NumericVector W0, bool verbose);
RcppExport SEXP _tdnn_loo_test(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP param_matSEXP, SEXP BSEXP, SEXP n_propSEXP, SEXP W0SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type param_mat(param_matSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W0(W0SEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(loo_test(X, Y, X_test, param_mat, B, n_prop, W0, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tune_params
arma::vec tune_params(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, const arma::mat& param_mat, int B, double n_prop, NumericVector W0, bool verbose);
RcppExport SEXP _tdnn_tune_params(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP param_matSEXP, SEXP BSEXP, SEXP n_propSEXP, SEXP W0SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type param_mat(param_matSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W0(W0SEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tune_params(X, Y, X_test, param_mat, B, n_prop, W0, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tune_params_debug
Rcpp::List tune_params_debug(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, const arma::mat& param_mat, int B, double n_prop, NumericVector W0, bool verbose);
RcppExport SEXP _tdnn_tune_params_debug(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP param_matSEXP, SEXP BSEXP, SEXP n_propSEXP, SEXP W0SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type param_mat(param_matSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W0(W0SEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tune_params_debug(X, Y, X_test, param_mat, B, n_prop, W0, verbose));
    return rcpp_result_gen;
END_RCPP
}
// r_like_order
arma::uvec r_like_order(const arma::vec& x, const arma::vec& y);
RcppExport SEXP _tdnn_r_like_order(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(r_like_order(x, y));
    return rcpp_result_gen;
END_RCPP
}
// weight_mat_lfac_s_2_filter
arma::mat weight_mat_lfac_s_2_filter(int n, const arma::vec& ord, const arma::vec& s_vec, double n_prop, bool is_s_2);
RcppExport SEXP _tdnn_weight_mat_lfac_s_2_filter(SEXP nSEXP, SEXP ordSEXP, SEXP s_vecSEXP, SEXP n_propSEXP, SEXP is_s_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< bool >::type is_s_2(is_s_2SEXP);
    rcpp_result_gen = Rcpp::wrap(weight_mat_lfac_s_2_filter(n, ord, s_vec, n_prop, is_s_2));
    return rcpp_result_gen;
END_RCPP
}
// round_modified
double round_modified(const double& x);
RcppExport SEXP _tdnn_round_modified(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(round_modified(x));
    return rcpp_result_gen;
END_RCPP
}
// round_modified_vec
arma::vec round_modified_vec(const arma::vec& x);
RcppExport SEXP _tdnn_round_modified_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(round_modified_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// arma_round
arma::vec arma_round(const arma::vec& x);
RcppExport SEXP _tdnn_arma_round(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_round(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tdnn_bootstrap_cpp_mt", (DL_FUNC) &_tdnn_bootstrap_cpp_mt, 9},
    {"_tdnn_bootstrap_trt_effect_cpp_mt", (DL_FUNC) &_tdnn_bootstrap_trt_effect_cpp_mt, 11},
    {"_tdnn_make_pdist_mat", (DL_FUNC) &_tdnn_make_pdist_mat, 3},
    {"_tdnn_make_ordered_Y_mat", (DL_FUNC) &_tdnn_make_ordered_Y_mat, 4},
    {"_tdnn_de_dnn_st_tuning", (DL_FUNC) &_tdnn_de_dnn_st_tuning, 8},
    {"_tdnn_de_dnn_st_mat_mult", (DL_FUNC) &_tdnn_de_dnn_st_mat_mult, 9},
    {"_tdnn_de_dnn_st_loop", (DL_FUNC) &_tdnn_de_dnn_st_loop, 9},
    {"_tdnn_de_dnn_st", (DL_FUNC) &_tdnn_de_dnn_st, 9},
    {"_tdnn_best_s", (DL_FUNC) &_tdnn_best_s, 1},
    {"_tdnn_tuning_st", (DL_FUNC) &_tdnn_tuning_st, 12},
    {"_tdnn_tuning_es", (DL_FUNC) &_tdnn_tuning_es, 11},
    {"_tdnn_est_reg_fn_rcpp", (DL_FUNC) &_tdnn_est_reg_fn_rcpp, 7},
    {"_tdnn_tuning_st_loop", (DL_FUNC) &_tdnn_tuning_st_loop, 10},
    {"_tdnn_tuning_st_mat_mult", (DL_FUNC) &_tdnn_tuning_st_mat_mult, 10},
    {"_tdnn_tuning_es_loop", (DL_FUNC) &_tdnn_tuning_es_loop, 10},
    {"_tdnn_est_reg_fn_st_loop", (DL_FUNC) &_tdnn_est_reg_fn_st_loop, 9},
    {"_tdnn_tdnn", (DL_FUNC) &_tdnn_tdnn, 8},
    {"_tdnn_de_dnn", (DL_FUNC) &_tdnn_de_dnn, 7},
    {"_tdnn_tuning", (DL_FUNC) &_tdnn_tuning, 6},
    {"_tdnn_tuning_est", (DL_FUNC) &_tdnn_tuning_est, 6},
    {"_tdnn_get_1nn_reg", (DL_FUNC) &_tdnn_get_1nn_reg, 4},
    {"_tdnn_fastPdist", (DL_FUNC) &_tdnn_fastPdist, 2},
    {"_tdnn_tdnn_reg_cpp", (DL_FUNC) &_tdnn_tdnn_reg_cpp, 10},
    {"_tdnn_tdnn_reg_cv_cpp", (DL_FUNC) &_tdnn_tdnn_reg_cv_cpp, 10},
    {"_tdnn_pt_mat_dist", (DL_FUNC) &_tdnn_pt_mat_dist, 2},
    {"_tdnn_make_ord_vec", (DL_FUNC) &_tdnn_make_ord_vec, 1},
    {"_tdnn_make_ordered_Y_vec", (DL_FUNC) &_tdnn_make_ordered_Y_vec, 4},
    {"_tdnn_make_param_estimate", (DL_FUNC) &_tdnn_make_param_estimate, 12},
    {"_tdnn_loo_test", (DL_FUNC) &_tdnn_loo_test, 8},
    {"_tdnn_tune_params", (DL_FUNC) &_tdnn_tune_params, 8},
    {"_tdnn_tune_params_debug", (DL_FUNC) &_tdnn_tune_params_debug, 8},
    {"_tdnn_r_like_order", (DL_FUNC) &_tdnn_r_like_order, 2},
    {"_tdnn_weight_mat_lfac_s_2_filter", (DL_FUNC) &_tdnn_weight_mat_lfac_s_2_filter, 5},
    {"_tdnn_round_modified", (DL_FUNC) &_tdnn_round_modified, 1},
    {"_tdnn_round_modified_vec", (DL_FUNC) &_tdnn_round_modified_vec, 1},
    {"_tdnn_arma_round", (DL_FUNC) &_tdnn_arma_round, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_tdnn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
