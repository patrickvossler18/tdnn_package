// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/tdnn.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// tdnn_st_boot
arma::vec tdnn_st_boot(arma::mat X, arma::vec Y, arma::mat X_test, const arma::mat& weight_mat_s_1, const arma::mat& weight_mat_s_2, const arma::vec c, double n_prop);
RcppExport SEXP _tdnn_tdnn_st_boot(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP weight_mat_s_1SEXP, SEXP weight_mat_s_2SEXP, SEXP cSEXP, SEXP n_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weight_mat_s_1(weight_mat_s_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weight_mat_s_2(weight_mat_s_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    rcpp_result_gen = Rcpp::wrap(tdnn_st_boot(X, Y, X_test, weight_mat_s_1, weight_mat_s_2, c, n_prop));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_cpp_mt
NumericMatrix bootstrap_cpp_mt(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, const arma::vec s_1, const arma::vec c, const double n_prop, const int B, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_bootstrap_cpp_mt(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP s_1SEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP BSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s_1(s_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< const int >::type B(BSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_cpp_mt(X, Y, X_test, s_1, c, n_prop, B, W0_));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_trt_effect_cpp_mt
NumericMatrix bootstrap_trt_effect_cpp_mt(const arma::mat& X, const arma::mat& Y, const arma::vec& W, const arma::mat& X_test, const arma::vec& s_choice_trt, const arma::vec& s_choice_ctl, const arma::vec& c_trt, const arma::vec& c_ctl, const double n_prop, const int B, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_bootstrap_trt_effect_cpp_mt(SEXP XSEXP, SEXP YSEXP, SEXP WSEXP, SEXP X_testSEXP, SEXP s_choice_trtSEXP, SEXP s_choice_ctlSEXP, SEXP c_trtSEXP, SEXP c_ctlSEXP, SEXP n_propSEXP, SEXP BSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s_choice_trt(s_choice_trtSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s_choice_ctl(s_choice_ctlSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c_trt(c_trtSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c_ctl(c_ctlSEXP);
    Rcpp::traits::input_parameter< const double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< const int >::type B(BSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_trt_effect_cpp_mt(X, Y, W, X_test, s_choice_trt, s_choice_ctl, c_trt, c_ctl, n_prop, B, W0_));
    return rcpp_result_gen;
END_RCPP
}
// tdnn
arma::vec tdnn(arma::mat X, arma::vec Y, arma::mat X_test, double c, double n_prop, int s_1_val, int s_2_val, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_tdnn(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP s_1_valSEXP, SEXP s_2_valSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< int >::type s_1_val(s_1_valSEXP);
    Rcpp::traits::input_parameter< int >::type s_2_val(s_2_valSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(tdnn(X, Y, X_test, c, n_prop, s_1_val, s_2_val, W0_));
    return rcpp_result_gen;
END_RCPP
}
// de_dnn
arma::vec de_dnn(arma::mat X, arma::vec Y, arma::mat X_test, arma::vec s_sizes, double c, double n_prop, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_de_dnn(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP s_sizesSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s_sizes(s_sizesSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(de_dnn(X, Y, X_test, s_sizes, c, n_prop, W0_));
    return rcpp_result_gen;
END_RCPP
}
// tuning
NumericVector tuning(arma::mat X, arma::vec Y, arma::mat X_test, double c, double n_prop, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_tuning(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(tuning(X, Y, X_test, c, n_prop, W0_));
    return rcpp_result_gen;
END_RCPP
}
// tuning_est
List tuning_est(arma::mat X, arma::vec Y, arma::mat X_test, double c, double n_prop, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_tuning_est(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(tuning_est(X, Y, X_test, c, n_prop, W0_));
    return rcpp_result_gen;
END_RCPP
}
// tdnn_ord_y
arma::vec tdnn_ord_y(arma::mat X, arma::vec Y, arma::mat X_test, arma::mat ordered_Y, arma::vec s_1, double c, double n_prop);
RcppExport SEXP _tdnn_tdnn_ord_y(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP ordered_YSEXP, SEXP s_1SEXP, SEXP cSEXP, SEXP n_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ordered_Y(ordered_YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s_1(s_1SEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    rcpp_result_gen = Rcpp::wrap(tdnn_ord_y(X, Y, X_test, ordered_Y, s_1, c, n_prop));
    return rcpp_result_gen;
END_RCPP
}
// tdnn_ord_y_st
double tdnn_ord_y_st(arma::mat ordered_Y_i, arma::vec s_1, int n, int p, double c, double n_prop);
RcppExport SEXP _tdnn_tdnn_ord_y_st(SEXP ordered_Y_iSEXP, SEXP s_1SEXP, SEXP nSEXP, SEXP pSEXP, SEXP cSEXP, SEXP n_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ordered_Y_i(ordered_Y_iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s_1(s_1SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    rcpp_result_gen = Rcpp::wrap(tdnn_ord_y_st(ordered_Y_i, s_1, n, p, c, n_prop));
    return rcpp_result_gen;
END_RCPP
}
// tuning_ord_Y_debug
Rcpp::List tuning_ord_Y_debug(const arma::mat& X, const arma::vec& Y, const arma::mat& X_test, const arma::mat& ordered_Y, double c, double n_prop);
RcppExport SEXP _tdnn_tuning_ord_Y_debug(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP ordered_YSEXP, SEXP cSEXP, SEXP n_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ordered_Y(ordered_YSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    rcpp_result_gen = Rcpp::wrap(tuning_ord_Y_debug(X, Y, X_test, ordered_Y, c, n_prop));
    return rcpp_result_gen;
END_RCPP
}
// tuning_ord_Y_tune_c
arma::mat tuning_ord_Y_tune_c(const arma::mat& X, const arma::vec& Y, const arma::mat& X_test, const arma::mat& ordered_Y, const arma::vec& c, double n_prop);
RcppExport SEXP _tdnn_tuning_ord_Y_tune_c(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP ordered_YSEXP, SEXP cSEXP, SEXP n_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ordered_Y(ordered_YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    rcpp_result_gen = Rcpp::wrap(tuning_ord_Y_tune_c(X, Y, X_test, ordered_Y, c, n_prop));
    return rcpp_result_gen;
END_RCPP
}
// tuning_ord_Y
arma::vec tuning_ord_Y(const arma::mat& X, const arma::vec& Y, const arma::mat& X_test, const arma::mat& ordered_Y, double c, double n_prop);
RcppExport SEXP _tdnn_tuning_ord_Y(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP ordered_YSEXP, SEXP cSEXP, SEXP n_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ordered_Y(ordered_YSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    rcpp_result_gen = Rcpp::wrap(tuning_ord_Y(X, Y, X_test, ordered_Y, c, n_prop));
    return rcpp_result_gen;
END_RCPP
}
// tuning_ord_Y_st
arma::vec tuning_ord_Y_st(const arma::mat& ordered_Y, int n, int p, int n_obs, double c, double n_prop);
RcppExport SEXP _tdnn_tuning_ord_Y_st(SEXP ordered_YSEXP, SEXP nSEXP, SEXP pSEXP, SEXP n_obsSEXP, SEXP cSEXP, SEXP n_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ordered_Y(ordered_YSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n_obs(n_obsSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    rcpp_result_gen = Rcpp::wrap(tuning_ord_Y_st(ordered_Y, n, p, n_obs, c, n_prop));
    return rcpp_result_gen;
END_RCPP
}
// make_ordered_Y_mat_debug
arma::mat make_ordered_Y_mat_debug(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, int B_NN);
RcppExport SEXP _tdnn_make_ordered_Y_mat_debug(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP B_NNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< int >::type B_NN(B_NNSEXP);
    rcpp_result_gen = Rcpp::wrap(make_ordered_Y_mat_debug(X, Y, X_test, B_NN));
    return rcpp_result_gen;
END_RCPP
}
// make_B_NN_estimates
arma::mat make_B_NN_estimates(const arma::mat& X, const arma::mat& Y, const arma::vec& X_test_i, const arma::uvec& top_B, const arma::vec c_vec, double s_tmp, double n_prop, int B_NN, double scale_p, bool debug);
RcppExport SEXP _tdnn_make_B_NN_estimates(SEXP XSEXP, SEXP YSEXP, SEXP X_test_iSEXP, SEXP top_BSEXP, SEXP c_vecSEXP, SEXP s_tmpSEXP, SEXP n_propSEXP, SEXP B_NNSEXP, SEXP scale_pSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type X_test_i(X_test_iSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type top_B(top_BSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< double >::type s_tmp(s_tmpSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< int >::type B_NN(B_NNSEXP);
    Rcpp::traits::input_parameter< double >::type scale_p(scale_pSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(make_B_NN_estimates(X, Y, X_test_i, top_B, c_vec, s_tmp, n_prop, B_NN, scale_p, debug));
    return rcpp_result_gen;
END_RCPP
}
// choose_s_1_val
arma::vec choose_s_1_val(arma::vec tuned_mse, arma::vec s_1_vec_tmp);
RcppExport SEXP _tdnn_choose_s_1_val(SEXP tuned_mseSEXP, SEXP s_1_vec_tmpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type tuned_mse(tuned_mseSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s_1_vec_tmp(s_1_vec_tmpSEXP);
    rcpp_result_gen = Rcpp::wrap(choose_s_1_val(tuned_mse, s_1_vec_tmp));
    return rcpp_result_gen;
END_RCPP
}
// choose_s_1_c_val
arma::vec choose_s_1_c_val(arma::vec s_1_vec, arma::vec c, arma::mat B_NN_estimates);
RcppExport SEXP _tdnn_choose_s_1_c_val(SEXP s_1_vecSEXP, SEXP cSEXP, SEXP B_NN_estimatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s_1_vec(s_1_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B_NN_estimates(B_NN_estimatesSEXP);
    rcpp_result_gen = Rcpp::wrap(choose_s_1_c_val(s_1_vec, c, B_NN_estimates));
    return rcpp_result_gen;
END_RCPP
}
// tune_de_dnn_no_dist_cpp
Rcpp::List tune_de_dnn_no_dist_cpp(arma::mat X, arma::vec Y, arma::mat X_test, Nullable<NumericVector> W0_, arma::vec c, int B_NN, double scale_p, double n_prop, bool estimate_variance, int bootstrap_iter, bool debug);
RcppExport SEXP _tdnn_tune_de_dnn_no_dist_cpp(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP W0_SEXP, SEXP cSEXP, SEXP B_NNSEXP, SEXP scale_pSEXP, SEXP n_propSEXP, SEXP estimate_varianceSEXP, SEXP bootstrap_iterSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type B_NN(B_NNSEXP);
    Rcpp::traits::input_parameter< double >::type scale_p(scale_pSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< bool >::type estimate_variance(estimate_varianceSEXP);
    Rcpp::traits::input_parameter< int >::type bootstrap_iter(bootstrap_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(tune_de_dnn_no_dist_cpp(X, Y, X_test, W0_, c, B_NN, scale_p, n_prop, estimate_variance, bootstrap_iter, debug));
    return rcpp_result_gen;
END_RCPP
}
// make_B_NN_estimates_st
arma::mat make_B_NN_estimates_st(const arma::mat& X, const arma::mat& Y, const arma::vec& X_test_i, const arma::uvec& top_B, const arma::vec c_vec, double s_tmp, double n_prop, int B_NN, double scale_p, bool debug);
RcppExport SEXP _tdnn_make_B_NN_estimates_st(SEXP XSEXP, SEXP YSEXP, SEXP X_test_iSEXP, SEXP top_BSEXP, SEXP c_vecSEXP, SEXP s_tmpSEXP, SEXP n_propSEXP, SEXP B_NNSEXP, SEXP scale_pSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type X_test_i(X_test_iSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type top_B(top_BSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< double >::type s_tmp(s_tmpSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< int >::type B_NN(B_NNSEXP);
    Rcpp::traits::input_parameter< double >::type scale_p(scale_pSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(make_B_NN_estimates_st(X, Y, X_test_i, top_B, c_vec, s_tmp, n_prop, B_NN, scale_p, debug));
    return rcpp_result_gen;
END_RCPP
}
// tune_de_dnn_no_dist_vary_c_cpp
Rcpp::List tune_de_dnn_no_dist_vary_c_cpp(arma::mat X, arma::vec Y, arma::mat X_test, Nullable<NumericVector> W0_, arma::vec c, int B_NN, double scale_p, double n_prop, bool estimate_variance, int bootstrap_iter, bool debug);
RcppExport SEXP _tdnn_tune_de_dnn_no_dist_vary_c_cpp(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP W0_SEXP, SEXP cSEXP, SEXP B_NNSEXP, SEXP scale_pSEXP, SEXP n_propSEXP, SEXP estimate_varianceSEXP, SEXP bootstrap_iterSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type B_NN(B_NNSEXP);
    Rcpp::traits::input_parameter< double >::type scale_p(scale_pSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< bool >::type estimate_variance(estimate_varianceSEXP);
    Rcpp::traits::input_parameter< int >::type bootstrap_iter(bootstrap_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(tune_de_dnn_no_dist_vary_c_cpp(X, Y, X_test, W0_, c, B_NN, scale_p, n_prop, estimate_variance, bootstrap_iter, debug));
    return rcpp_result_gen;
END_RCPP
}
// tune_de_dnn_no_dist_vary_c_cpp_mt
Rcpp::List tune_de_dnn_no_dist_vary_c_cpp_mt(arma::mat X, arma::vec Y, arma::mat X_test, Nullable<NumericVector> W0_, arma::vec c, int B_NN, double scale_p, double n_prop, bool estimate_variance, int bootstrap_iter, bool debug);
RcppExport SEXP _tdnn_tune_de_dnn_no_dist_vary_c_cpp_mt(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP W0_SEXP, SEXP cSEXP, SEXP B_NNSEXP, SEXP scale_pSEXP, SEXP n_propSEXP, SEXP estimate_varianceSEXP, SEXP bootstrap_iterSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type B_NN(B_NNSEXP);
    Rcpp::traits::input_parameter< double >::type scale_p(scale_pSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< bool >::type estimate_variance(estimate_varianceSEXP);
    Rcpp::traits::input_parameter< int >::type bootstrap_iter(bootstrap_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(tune_de_dnn_no_dist_vary_c_cpp_mt(X, Y, X_test, W0_, c, B_NN, scale_p, n_prop, estimate_variance, bootstrap_iter, debug));
    return rcpp_result_gen;
END_RCPP
}
// tdnn_reg_cpp
List tdnn_reg_cpp(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, double c, double n_prop, int s_1_val, int bootstrap_iter, bool estimate_variance, bool verbose, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_tdnn_reg_cpp(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP cSEXP, SEXP n_propSEXP, SEXP s_1_valSEXP, SEXP bootstrap_iterSEXP, SEXP estimate_varianceSEXP, SEXP verboseSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< int >::type s_1_val(s_1_valSEXP);
    Rcpp::traits::input_parameter< int >::type bootstrap_iter(bootstrap_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type estimate_variance(estimate_varianceSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(tdnn_reg_cpp(X, Y, X_test, c, n_prop, s_1_val, bootstrap_iter, estimate_variance, verbose, W0_));
    return rcpp_result_gen;
END_RCPP
}
// tdnn_reg_cv_cpp
List tdnn_reg_cv_cpp(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, const arma::mat& param_mat, double n_prop, int B, int bootstrap_iter, bool estimate_variance, bool verbose, Nullable<NumericVector> W0_);
RcppExport SEXP _tdnn_tdnn_reg_cv_cpp(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP param_matSEXP, SEXP n_propSEXP, SEXP BSEXP, SEXP bootstrap_iterSEXP, SEXP estimate_varianceSEXP, SEXP verboseSEXP, SEXP W0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type param_mat(param_matSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type bootstrap_iter(bootstrap_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type estimate_variance(estimate_varianceSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type W0_(W0_SEXP);
    rcpp_result_gen = Rcpp::wrap(tdnn_reg_cv_cpp(X, Y, X_test, param_mat, n_prop, B, bootstrap_iter, estimate_variance, verbose, W0_));
    return rcpp_result_gen;
END_RCPP
}
// pt_mat_dist
arma::vec pt_mat_dist(arma::mat X, arma::vec y);
RcppExport SEXP _tdnn_pt_mat_dist(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pt_mat_dist(X, y));
    return rcpp_result_gen;
END_RCPP
}
// make_ord_vec
arma::vec make_ord_vec(int n);
RcppExport SEXP _tdnn_make_ord_vec(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(make_ord_vec(n));
    return rcpp_result_gen;
END_RCPP
}
// make_ordered_Y_vec
arma::rowvec make_ordered_Y_vec(const arma::mat& X_train, const arma::vec& X_val_vec, const arma::mat& Y_train, int n);
RcppExport SEXP _tdnn_make_ordered_Y_vec(SEXP X_trainSEXP, SEXP X_val_vecSEXP, SEXP Y_trainSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_train(X_trainSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type X_val_vec(X_val_vecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_train(Y_trainSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(make_ordered_Y_vec(X_train, X_val_vec, Y_train, n));
    return rcpp_result_gen;
END_RCPP
}
// make_param_estimate
arma::vec make_param_estimate(const arma::mat& X_train, const arma::mat& Y_train, const arma::mat& X_val, const arma::rowvec& ordered_Y, const arma::vec& ord_arma, int n, int p, int log_n, double c, int s_1_val, int s_2_val, double n_prop);
RcppExport SEXP _tdnn_make_param_estimate(SEXP X_trainSEXP, SEXP Y_trainSEXP, SEXP X_valSEXP, SEXP ordered_YSEXP, SEXP ord_armaSEXP, SEXP nSEXP, SEXP pSEXP, SEXP log_nSEXP, SEXP cSEXP, SEXP s_1_valSEXP, SEXP s_2_valSEXP, SEXP n_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_train(X_trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_train(Y_trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_val(X_valSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type ordered_Y(ordered_YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ord_arma(ord_armaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type log_n(log_nSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type s_1_val(s_1_valSEXP);
    Rcpp::traits::input_parameter< int >::type s_2_val(s_2_valSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    rcpp_result_gen = Rcpp::wrap(make_param_estimate(X_train, Y_train, X_val, ordered_Y, ord_arma, n, p, log_n, c, s_1_val, s_2_val, n_prop));
    return rcpp_result_gen;
END_RCPP
}
// loo_test
Rcpp::List loo_test(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, const arma::mat& param_mat, int B, double n_prop, NumericVector W0, bool verbose);
RcppExport SEXP _tdnn_loo_test(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP param_matSEXP, SEXP BSEXP, SEXP n_propSEXP, SEXP W0SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type param_mat(param_matSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W0(W0SEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(loo_test(X, Y, X_test, param_mat, B, n_prop, W0, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tune_params
arma::vec tune_params(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, const arma::mat& param_mat, int B, double n_prop, NumericVector W0, bool verbose);
RcppExport SEXP _tdnn_tune_params(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP param_matSEXP, SEXP BSEXP, SEXP n_propSEXP, SEXP W0SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type param_mat(param_matSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W0(W0SEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tune_params(X, Y, X_test, param_mat, B, n_prop, W0, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tune_params_debug
Rcpp::List tune_params_debug(const arma::mat& X, const arma::mat& Y, const arma::mat& X_test, const arma::mat& param_mat, int B, double n_prop, NumericVector W0, bool verbose);
RcppExport SEXP _tdnn_tune_params_debug(SEXP XSEXP, SEXP YSEXP, SEXP X_testSEXP, SEXP param_matSEXP, SEXP BSEXP, SEXP n_propSEXP, SEXP W0SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type param_mat(param_matSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W0(W0SEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tune_params_debug(X, Y, X_test, param_mat, B, n_prop, W0, verbose));
    return rcpp_result_gen;
END_RCPP
}
// r_like_order
arma::uvec r_like_order(const arma::vec& x, const arma::vec& y);
RcppExport SEXP _tdnn_r_like_order(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(r_like_order(x, y));
    return rcpp_result_gen;
END_RCPP
}
// weight_mat_lfac_s_2_filter
arma::mat weight_mat_lfac_s_2_filter(int n, const arma::vec& ord, const arma::vec& s_vec, double n_prop, bool is_s_2);
RcppExport SEXP _tdnn_weight_mat_lfac_s_2_filter(SEXP nSEXP, SEXP ordSEXP, SEXP s_vecSEXP, SEXP n_propSEXP, SEXP is_s_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ord(ordSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< double >::type n_prop(n_propSEXP);
    Rcpp::traits::input_parameter< bool >::type is_s_2(is_s_2SEXP);
    rcpp_result_gen = Rcpp::wrap(weight_mat_lfac_s_2_filter(n, ord, s_vec, n_prop, is_s_2));
    return rcpp_result_gen;
END_RCPP
}
// round_modified
double round_modified(const double& x);
RcppExport SEXP _tdnn_round_modified(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(round_modified(x));
    return rcpp_result_gen;
END_RCPP
}
// round_modified_vec
arma::vec round_modified_vec(const arma::vec& x);
RcppExport SEXP _tdnn_round_modified_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(round_modified_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// arma_round
arma::vec arma_round(const arma::vec& x);
RcppExport SEXP _tdnn_arma_round(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_round(x));
    return rcpp_result_gen;
END_RCPP
}
// calc_dist_mat_cpp
arma::mat calc_dist_mat_cpp(const arma::mat& A, const arma::mat& B);
RcppExport SEXP _tdnn_calc_dist_mat_cpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_dist_mat_cpp(A, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tdnn_tdnn_st_boot", (DL_FUNC) &_tdnn_tdnn_st_boot, 7},
    {"_tdnn_bootstrap_cpp_mt", (DL_FUNC) &_tdnn_bootstrap_cpp_mt, 8},
    {"_tdnn_bootstrap_trt_effect_cpp_mt", (DL_FUNC) &_tdnn_bootstrap_trt_effect_cpp_mt, 11},
    {"_tdnn_tdnn", (DL_FUNC) &_tdnn_tdnn, 8},
    {"_tdnn_de_dnn", (DL_FUNC) &_tdnn_de_dnn, 7},
    {"_tdnn_tuning", (DL_FUNC) &_tdnn_tuning, 6},
    {"_tdnn_tuning_est", (DL_FUNC) &_tdnn_tuning_est, 6},
    {"_tdnn_tdnn_ord_y", (DL_FUNC) &_tdnn_tdnn_ord_y, 7},
    {"_tdnn_tdnn_ord_y_st", (DL_FUNC) &_tdnn_tdnn_ord_y_st, 6},
    {"_tdnn_tuning_ord_Y_debug", (DL_FUNC) &_tdnn_tuning_ord_Y_debug, 6},
    {"_tdnn_tuning_ord_Y_tune_c", (DL_FUNC) &_tdnn_tuning_ord_Y_tune_c, 6},
    {"_tdnn_tuning_ord_Y", (DL_FUNC) &_tdnn_tuning_ord_Y, 6},
    {"_tdnn_tuning_ord_Y_st", (DL_FUNC) &_tdnn_tuning_ord_Y_st, 6},
    {"_tdnn_make_ordered_Y_mat_debug", (DL_FUNC) &_tdnn_make_ordered_Y_mat_debug, 4},
    {"_tdnn_make_B_NN_estimates", (DL_FUNC) &_tdnn_make_B_NN_estimates, 10},
    {"_tdnn_choose_s_1_val", (DL_FUNC) &_tdnn_choose_s_1_val, 2},
    {"_tdnn_choose_s_1_c_val", (DL_FUNC) &_tdnn_choose_s_1_c_val, 3},
    {"_tdnn_tune_de_dnn_no_dist_cpp", (DL_FUNC) &_tdnn_tune_de_dnn_no_dist_cpp, 11},
    {"_tdnn_make_B_NN_estimates_st", (DL_FUNC) &_tdnn_make_B_NN_estimates_st, 10},
    {"_tdnn_tune_de_dnn_no_dist_vary_c_cpp", (DL_FUNC) &_tdnn_tune_de_dnn_no_dist_vary_c_cpp, 11},
    {"_tdnn_tune_de_dnn_no_dist_vary_c_cpp_mt", (DL_FUNC) &_tdnn_tune_de_dnn_no_dist_vary_c_cpp_mt, 11},
    {"_tdnn_tdnn_reg_cpp", (DL_FUNC) &_tdnn_tdnn_reg_cpp, 10},
    {"_tdnn_tdnn_reg_cv_cpp", (DL_FUNC) &_tdnn_tdnn_reg_cv_cpp, 10},
    {"_tdnn_pt_mat_dist", (DL_FUNC) &_tdnn_pt_mat_dist, 2},
    {"_tdnn_make_ord_vec", (DL_FUNC) &_tdnn_make_ord_vec, 1},
    {"_tdnn_make_ordered_Y_vec", (DL_FUNC) &_tdnn_make_ordered_Y_vec, 4},
    {"_tdnn_make_param_estimate", (DL_FUNC) &_tdnn_make_param_estimate, 12},
    {"_tdnn_loo_test", (DL_FUNC) &_tdnn_loo_test, 8},
    {"_tdnn_tune_params", (DL_FUNC) &_tdnn_tune_params, 8},
    {"_tdnn_tune_params_debug", (DL_FUNC) &_tdnn_tune_params_debug, 8},
    {"_tdnn_r_like_order", (DL_FUNC) &_tdnn_r_like_order, 2},
    {"_tdnn_weight_mat_lfac_s_2_filter", (DL_FUNC) &_tdnn_weight_mat_lfac_s_2_filter, 5},
    {"_tdnn_round_modified", (DL_FUNC) &_tdnn_round_modified, 1},
    {"_tdnn_round_modified_vec", (DL_FUNC) &_tdnn_round_modified_vec, 1},
    {"_tdnn_arma_round", (DL_FUNC) &_tdnn_arma_round, 1},
    {"_tdnn_calc_dist_mat_cpp", (DL_FUNC) &_tdnn_calc_dist_mat_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_tdnn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
